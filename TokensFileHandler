package com.playrobot.tokens;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.bukkit.ChatColor;
import org.bukkit.command.CommandSender;

public class TokensFileHandler {

	TokensCommandHandler commandHandler;
	File directory = new File("plugins/PrTokens");
	File tokensFile = new File("plugins/PrTokens/Tokens.txt");
	private Map<String, Integer> DonatorMap = new HashMap<String, Integer>();

	public TokensFileHandler(TokensCommandHandler commandHandler) {
		this.commandHandler = commandHandler;

		if (!directory.exists()) {
			directory.mkdir();
		}
		if (!tokensFile.exists()) {
			try {
				tokensFile.createNewFile();
			} catch (IOException e) {
				e.printStackTrace();
			}
		} else {
			try {

				FileInputStream info = new FileInputStream(tokensFile);
				DataInputStream in = new DataInputStream(info);
				@SuppressWarnings("resource")
				BufferedReader br = new BufferedReader(
						new InputStreamReader(in));

				String lineRead;

				while ((lineRead = br.readLine()) != null) {
					String[] components = lineRead.split(": ");
					DonatorMap.put(components[0], Integer.valueOf(components[1]));
				}

			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	public void save() {
		
		try {
			@SuppressWarnings("resource")
			PrintWriter writer = new PrintWriter(new FileWriter(tokensFile));
			List<String> names = new ArrayList<String>(DonatorMap.keySet());
			List<Integer> tokens = new ArrayList<Integer>(DonatorMap.values());
			for (int i = 0; i < DonatorMap.size(); i++) {
				writer.println(names.get(i) + ": " + tokens.get(i));
				writer.flush();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void changeTokens(CommandSender sender, boolean giving, String playerName, int DonatorTokens) {
		if (DonatorMap.containsKey(playerName)) {
			if (giving) {
				DonatorMap.put(playerName, DonatorMap.get(playerName) + DonatorTokens);
				if (commandHandler.tokensMain.getServer().getOfflinePlayer(playerName).getPlayer().isOnline()) {
					commandHandler.tokensMain.getServer().getPlayer(playerName).sendMessage(ChatColor.GREEN + "You've been given " + ChatColor.GOLD + DonatorTokens + ChatColor.GREEN +" Donator Tokens!");
				}
				sender.sendMessage(ChatColor.GREEN + "You've given " + ChatColor.BLUE + playerName + " "+ ChatColor.GOLD + DonatorTokens + ChatColor.GREEN + " Donator Tokens!");
			} else if (!giving) {
				DonatorMap.put(playerName, DonatorMap.get(playerName) - DonatorTokens);
				if (commandHandler.tokensMain.getServer().getOfflinePlayer(playerName).getPlayer().isOnline()) {
					commandHandler.tokensMain.getServer().getPlayer(playerName).sendMessage(ChatColor.BLUE + sender.getName() + ChatColor.GREEN + " took " + ChatColor.GOLD + DonatorTokens + ChatColor.GREEN +" Donator Tokens from you!");
				}
				sender.sendMessage(ChatColor.GREEN + "You've taken " + ChatColor.GOLD + DonatorTokens + ChatColor.GREEN +" Donator Tokens from " + ChatColor.BLUE + playerName + ChatColor.GREEN + "!");
				if (DonatorMap.get(playerName) < 0) {
					DonatorMap.put(playerName, 0);
				}
			}

		} else {
			if (!giving) {
				DonatorMap.put(playerName, DonatorTokens);
				if (commandHandler.tokensMain.getServer().getOfflinePlayer(playerName).getPlayer().isOnline()) {
					commandHandler.tokensMain.getServer().getPlayer(playerName).sendMessage(ChatColor.GREEN + "You've been given " + ChatColor.GOLD + DonatorTokens + ChatColor.GREEN +" Donator Tokens!");
				}
				sender.sendMessage(ChatColor.GREEN + "You've given " + ChatColor.BLUE + playerName + " "+ ChatColor.GOLD + DonatorTokens + ChatColor.GREEN + " Donator Tokens!");
			} else if (!giving) {
				DonatorMap.put(playerName, 0);
				if (commandHandler.tokensMain.getServer().getOfflinePlayer(playerName).getPlayer().isOnline()) {
					commandHandler.tokensMain.getServer().getPlayer(playerName).sendMessage(ChatColor.BLUE + sender.getName() + ChatColor.GREEN + " took " + ChatColor.GOLD + DonatorTokens + ChatColor.GREEN +" Donator Tokens from you!");
				}
				sender.sendMessage(ChatColor.GREEN + "You've taken " + ChatColor.GOLD + DonatorTokens + ChatColor.GREEN +" Donator Tokens from " + ChatColor.BLUE + playerName + ChatColor.GREEN + "!");
			}
		}

		save();

	}
	
	public int playerTokens(String playerName) {

		for (int i = 0; i < DonatorMap.size(); i++) {
			if (DonatorMap.containsKey(playerName)) {
				return DonatorMap.get(playerName);
			}
		}

		return 0;
	}
}